---
layout: post
title:  "스프링 입문을 위한 자바 객체지향의 원리와 이해 - 1"
date:   2020-02-08 00:00:00
categories: Book
tags: java spring
mathjax: true
---
* content
{:toc}

## 객체 지향 설계 5원칙 - SOLID

* SRP(Single Responsibility Principle) : 단일 책임 원리    
* OCP(Open Closed Principle) : 개방 폐쇄 원칙     
* LSP(Liskov Substition Principle) : 리스코프 치환 원칙    
* ISP(Interface Sergregation Principle) : 인터페이스 분리 원칙    
* DIP(Dependency Inversion Principle) : 의존 역전 원칙

<br>

	1. SRP(Single Responsibility Principle) - 단일 책임의 원칙

>"어떤 클래스를 변경해야 하는 이유는 오직 하나뿐이어야 한다." -로버트 C.마틴  
 
<br>
![](/../img/uml1.jpg)
<br>

좋지않은 예. 
역할과 책임이 너무 많아서 피곤을 유발한다. 
 

이런 경우에 역할(책임)을 분리하라는 것이 단일 책임 원칙이다.

<br>
<br>
![](/../img/uml2.jpg)

남자라는 하나의 클래스가 역할과 책임에 따라 네 개의 클래스로 쪼개진 것을 볼 수 있다. 
>단일 책임 원칙은 속성, 메서드, 패키지, 모듈, 컴포넌트, 프레임워크 등에도 적용할수 있는 개념이다.

<br>
<br>
<br>


	2. OCP(Open Closed Principle) - 개방 폐쇄 원칙
	
>"소프트웨어 엔티티(클래스, 모듈, 함수 등)는 확장에 대해서는 열려 있어야 하지만 변경에 대해서는 닫혀 있어야 한다. " -로버트 C.마틴

현실 세계의 개방 폐쇄 원칙의 사례를 하나 들어보면,편의점에서는 일일 삼교대로 직원이 교대한다. <br>
주말에는 다른 아르바이트 직원이 근무하기도 한다. <br>
하지만 직원이 바뀐다고해서 손님의 구매라는 행위를 하는 데에는 지장이 없다. <br>
편의점 직원이 근본적으로 판매라고 하는 행위, 즉 손님과의 인터페이스가 바뀌지 않는 한 손님의 구매라는 행위는 직원이 세부적으로 구매 담당자든, 보안 담당자든 심지어 남자에서 여자로, 학생에서 노인으로 교대한다고 해도 전혀 영향을 받지 않는다. <br>
직원 교대라고 하는 주변의 변화에 손님의 구매 행위는 영향을 받지 않는 것이고, 직원은 교대라고 하는 확장 행위에는 열려 있는 것이다. 또한 교대 이외에도 구매 담당자의 행위를 추가하거나, 보안 담당자의 행위를 추가하는 확장에 대한 직원은 열려있다. 이런 내용을 UML 약식 표기법으로 표현해 보면 다음과 같다. 

<br>
<br>
![](/../img/uml3.png)
<br>

개방 폐쇄 원칙은 객체 지향 프로그램의 가장 큰 장점인 유연성, 재사용성, 유지보수성을 얻을 수 있다. 
따라서 객체 지향 프로그래밍에서 개방 폐쇄 원칙은 반드시 지켜야 할 원칙이다. 

ex) JDBC - JDBC를 사용하는 클라이언트는 데이터베이스가 오라클에서 MYSQL로 바뀌더라도 Connection을
설정하는 부분 외에는 따로 수정할 필요가 없다. Connection부분을 별도의 설정 파일로 분리해두면 클라이언트 코드는
단 한 줄도 변경할 필요가 없다. 

<br>
<br>

	3. LSP(Liskov Substition Principle) - 리스코프 치환 법칙

>"서브 타입은 언제나 자신의 기반타입(base type)으로 교체할 수 있어야 한다." -로버트 C.마틴

상속에 대해 설명하면서 객체 지향에서의 상속은 조직도나 계층도가 아닌 분류도가 돼야 한다고 했다. 
객체 지향의 상속은 다음의 조건을 만족해야 한다. 
- 하위클래스 is a kind of 상위 클래스 - 하위 분류는 상위 분류의 한 종류이다.
- 구현클래스 is able to 인터페이스 - 구현 분류는 인터페이스할 수 있어야 한다. 
<br>
<br>
위 두 개의 문장대로 구현된 프로그램이라면 리스코프 치환 원칙을 잘 지키는 것.
<br>
![](/../img/uml4.jpg)
<br>
리스코프 치환 원칙 위반 사례 - 계층도/조직도
<br>
<br>
![](/../img/uml5.jpg)
<br>
리스코프 치환 원칙 적용 사례 -분류도
<br>
<br>
계층도/조직도인 경우를 보면 딸이 아버지, 할아버지의 역할을 하는 것이 논리에 맞지 않음을 알 수 있다.<br>
2번째 그림의 경우 하위에 존재하는 것들은 상위에 있는 것들의 역할을 하는 데 전혀 문제가 없다. <br>
고래가 포유류 동물의 역할을 하는 것은 전혀 문제가 되지 않는다. <br>
결국 리스코프 치환 원칙은 객체 지향의 상속이라는 특성을 올바르게 활용하면서 자연스럽게 얻게 되는 것이다. <br>
<br>
